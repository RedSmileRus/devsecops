name: CI-CD (Yandex Cloud) + Security

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# нужно для выгрузки SARIF в Security
permissions:
  contents: read
  security-events: write

jobs:
  # ---------- 1) SAST: Gitleaks ----------
  sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run gitleaks (SAST)
        uses: gitleaks/gitleaks-action@v2
        with:
          # генерим SARIF; если утечки — шаг может упасть, но нам нужен отчёт
          args: detect --no-git -v --report-format sarif --report-path gitleaks-results.sarif || true

      # страховка: если по каким-то причинам файла нет — положим валидный пустой SARIF
      - name: Ensure SARIF exists
        run: |
          if [ ! -s gitleaks-results.sarif ]; then
            echo '{
              "version":"2.1.0",
              "runs":[{"tool":{"driver":{"name":"gitleaks","informationUri":"https://github.com/gitleaks/gitleaks"}},"results":[]}]
            }' > gitleaks-results.sarif
          fi

      - name: Upload SARIF to Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks-results.sarif

  # ---------- 2) Build / Push / Deploy ----------
  build_push_deploy:
    runs-on: ubuntu-latest
    needs: [sast]
    env:
      IMAGE: ${{ secrets.YC_REGISTRY_REPO }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install YC CLI
        run: |
          set -euo pipefail
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a
          install -m 0755 "$HOME/yandex-cloud/bin/yc" /usr/local/bin/yc
          yc --version

      - name: Configure YC with SA key
        env:
          YC_SA_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          set -euo pipefail
          echo "$YC_SA_KEY_JSON" > sa-key.json
          yc config set service-account-key sa-key.json
          yc config set cloud-id  "$YC_CLOUD_ID"
          yc config set folder-id "$YC_FOLDER_ID"
          yc config list

      - name: Docker login to Yandex CR (IAM token)
        run: |
          set -euo pipefail
          TOKEN=$(yc iam create-token)
          echo "$TOKEN" | docker login -u iam --password-stdin cr.yandex

      - name: Build & Push image
        run: |
          set -euo pipefail
          docker build -t "$IMAGE:latest" -t "$IMAGE:${{ github.sha }}" .
          docker push "$IMAGE:latest"
          docker push "$IMAGE:${{ github.sha }}"

      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail
            mkdir -p ~/site
            export IMAGE="${{ secrets.YC_REGISTRY_REPO }}"
            cat > ~/site/docker-compose.yml <<'YAML'
            services:
              web:
                image: ${IMAGE}:latest
                ports:
                  - "80:80"
                restart: unless-stopped
            YAML
            docker compose -f ~/site/docker-compose.yml pull
            docker compose -f ~/site/docker-compose.yml up -d
            docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}'

      - name: Health check
        run: |
          set -euo pipefail
          curl -I --max-time 10 "http://${{ secrets.VM_HOST }}/" || exit 1

  # ---------- 3) Image Scan (Trivy, SARIF) ----------
    image_scan:
      runs-on: ubuntu-latest
      needs: [build_push_deploy]
      steps:
        - name: Install Trivy
          run: |
            sudo apt-get update
            sudo apt-get install -y wget
            wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.55.0_Linux-64bit.deb
            sudo dpkg -i trivy_0.55.0_Linux-64bit.deb
  
        - name: Trivy image scan (HIGH/CRITICAL fail)
          run: |
            trivy image --exit-code 1 --severity HIGH,CRITICAL \
              --format sarif --output trivy-image.sarif \
              ${{ secrets.YC_REGISTRY_REPO }}:latest
  
        - name: Upload Trivy SARIF
          uses: github/codeql-action/upload-sarif@v3
          with:
            sarif_file: trivy-image.sarif
          if: always()
  
    # ---------- 4) DAST (ZAP Baseline) ----------
    dast:
      runs-on: ubuntu-latest
      needs: [build_push_deploy]
      steps:
        - name: ZAP Baseline Scan (no GitHub issues)
          uses: zaproxy/action-baseline@v0.12.0
          with:
            target: http://${{ secrets.VM_HOST }}/
            cmd_options: >-
              -a -m 5
  
        - name: Upload ZAP HTML report
          uses: actions/upload-artifact@v4
          with:
            name: zap-report
            path: report_html.html
          if: always()
  
