name: CI-CD (Yandex Cloud) + Security

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# Нужны права, чтобы грузить SARIF в Security -> Code scanning alerts
permissions:
  contents: read
  security-events: write

env:
  IMAGE: ${{ secrets.YC_REGISTRY_REPO }}   # cr.yandex/<registry-id>/devsecops
  TARGET_URL: http://${{ secrets.VM_HOST }}/

jobs:
  # ---------------- CI/CD ----------------
  build_push_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install YC CLI
        run: |
          set -euo pipefail
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a
          install -m 0755 "$HOME/yandex-cloud/bin/yc" /usr/local/bin/yc
          yc --version

      - name: Configure YC with SA key
        env:
          YC_SA_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          set -euo pipefail
          echo "$YC_SA_KEY_JSON" > sa-key.json
          yc config set service-account-key sa-key.json
          yc config set cloud-id  "$YC_CLOUD_ID"
          yc config set folder-id "$YC_FOLDER_ID"
          yc config list

      - name: Docker login to Yandex CR (IAM token)
        run: |
          set -euo pipefail
          TOKEN=$(yc iam create-token)
          echo "$TOKEN" | docker login -u iam --password-stdin cr.yandex

      - name: Build & Push image
        run: |
          set -euo pipefail
          docker build -t "$IMAGE:latest" -t "$IMAGE:${{ github.sha }}" .
          docker push "$IMAGE:latest"
          docker push "$IMAGE:${{ github.sha }}"

      - name: Deploy to VM (docker compose up -d)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail
            mkdir -p ~/site
            export IMAGE="${{ secrets.YC_REGISTRY_REPO }}"
            cat > ~/site/docker-compose.yml <<'YAML'
            services:
              web:
                image: ${IMAGE}:latest
                ports:
                  - "80:80"
                restart: unless-stopped
            YAML
            docker compose -f ~/site/docker-compose.yml pull
            docker compose -f ~/site/docker-compose.yml up -d
            docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}'

      - name: Health check (curl)
        run: |
          set -euo pipefail
          curl -I --max-time 10 "$TARGET_URL"

  # ---------------- SAST (Gitleaks) ----------------
  sast:
    runs-on: ubuntu-latest
    needs: build_push_deploy

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Gitleaks (secrets scan)
        run: |
          set -euo pipefail
          docker run --rm -v "${PWD}:/repo" zricethezav/gitleaks:latest detect \
            --source="/repo" --no-git \
            --report-format=sarif --report-path="/repo/gitleaks-results.sarif" \
            --exit-code=1 || true
          # Пояснение: Gitleaks вернёт 1 при нахождении секретов.
          # Мы не падаем сразу здесь, а отдаём отчёт в Code Scanning и провалим gateway ниже.

      - name: Upload Gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks-results.sarif
          category: gitleaks

      - name: Fail if secrets found
        run: |
          # Если файл SARIF не пуст и содержит findings -> фейлим job
          if [ -s gitleaks-results.sarif ] && grep -q '"results":\s*\[' gitleaks-results.sarif; then
            if ! grep -q '"results":\s*\[\s*\]' gitleaks-results.sarif; then
              echo "Gitleaks found potential secrets. Failing the job."
              exit 1
            fi
          fi

  # ---------------- IMAGE SCAN (Trivy) ----------------
  image_scan:
    runs-on: ubuntu-latest
    needs: build_push_deploy

    steps:
      - name: Trivy image scan (HIGH/CRITICAL fail)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE }}:latest
          format: 'sarif'
          output: 'trivy-image.sarif'
          vuln-type: 'os,library'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'
          exit-code: '1'   # security gateway: при HIGH/CRITICAL — фейлим job

      - name: Upload Trivy SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
          category: trivy-image

  # ---------------- DAST (OWASP ZAP baseline) ----------------
  dast:
    runs-on: ubuntu-latest
    needs: build_push_deploy
    steps:
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ env.TARGET_URL }}
          cmd_options: >-
            -a                      # автоматический режим
            -m 5                    # максимум 5 минут активностей
            -t 60                   # таймаут запроса к URL
            -r zap-report.html      # html-отчёт
            -J zap-report.json      # json
            -w zap-warn.md          # human-readable summary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload ZAP HTML report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            zap-report.html
            zap-report.json
            zap-warn.md

      # Простой gateway: провалить job, если ZAP нашёл ALERTS уровня High/Medium.
      - name: Fail on ZAP findings (High/Medium)
        run: |
          set -euo pipefail
          if grep -qi '"risk":"High"\|"risk":"Medium"' zap-report.json; then
            echo "ZAP found Medium/High alerts. Failing the job."
            exit 1
          fi
