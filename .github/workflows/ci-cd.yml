name: CI-CD (Yandex Cloud) + Security

on:
  push:
    branches: ["main"]
  workflow_dispatch:

# нужно для загрузки SARIF в Security tab
permissions:
  contents: read
  security-events: write

jobs:
  # ---------- 1) SAST: Gitleaks ----------
  sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run gitleaks (SAST)
        uses: gitleaks/gitleaks-action@v2
        with:
          # Пишем отчёт прямо в рабочую папку раннера
          args: >
            detect --no-git -v
            --report-format sarif
            --report-path "$GITHUB_WORKSPACE/gitleaks-results.sarif"
            --redact
            --exit-code 0

      # Если по какой-то причине отчёт не появился — создаём "пустой" SARIF,
      # чтобы аплоад не падал и Security вкладка оставалась зелёной.
      - name: Ensure SARIF exists
        run: |
          if [ ! -s gitleaks-results.sarif ]; then
            echo '{
              "version": "2.1.0",
              "runs": [{
                "tool": {
                  "driver": {
                    "name": "gitleaks",
                    "informationUri": "https://github.com/gitleaks/gitleaks",
                    "rules": []
                  }
                },
                "results": []
              }]
            }' > gitleaks-results.sarif
          fi

      - name: Upload SARIF to Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks-results.sarif

  # ---------- 2) Build / Push / Deploy ----------
  build_push_deploy:
    runs-on: ubuntu-latest
    needs: [sast]
    env:
      IMAGE: ${{ secrets.YC_REGISTRY_REPO }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install YC CLI
        run: |
          set -euo pipefail
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a
          install -m 0755 "$HOME/yandex-cloud/bin/yc" /usr/local/bin/yc
          yc --version

      - name: Configure YC with SA key
        env:
          YC_SA_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          set -euo pipefail
          echo "$YC_SA_KEY_JSON" > sa-key.json
          yc config set service-account-key sa-key.json
          yc config set cloud-id  "$YC_CLOUD_ID"
          yc config set folder-id "$YC_FOLDER_ID"
          yc config list

      - name: Docker login to Yandex CR (IAM token)
        run: |
          set -euo pipefail
          TOKEN=$(yc iam create-token)
          echo "$TOKEN" | docker login -u iam --password-stdin cr.yandex

      - name: Build & Push image
        run: |
          set -euo pipefail
          docker build -t "$IMAGE:latest" -t "$IMAGE:${{ github.sha }}" .
          docker push "$IMAGE:latest"
          docker push "$IMAGE:${{ github.sha }}"

      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail
            mkdir -p ~/site
            export IMAGE="${{ secrets.YC_REGISTRY_REPO }}"
            cat > ~/site/docker-compose.yml <<'YAML'
            services:
              web:
                image: ${IMAGE}:latest
                ports:
                  - "80:80"
                restart: unless-stopped
            YAML
            docker compose -f ~/site/docker-compose.yml pull
            docker compose -f ~/site/docker-compose.yml up -d
            docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}'

      - name: Health check
        run: |
          set -euo pipefail
          curl -I --max-time 10 "http://${{ secrets.VM_HOST }}/" || exit 1

  # ---------- 3) Image Scan (Trivy, SARIF) ----------
  image_scan:
    runs-on: ubuntu-latest
    needs: [build_push_deploy]
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Trivy image scan (HIGH/CRITICAL fail)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ secrets.YC_REGISTRY_REPO }}:latest
          format: sarif
          output: trivy-image.sarif
          vuln-type: os,library
          scanners: vuln
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          exit-code: '1'
      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-image.sarif

  # ---------- 4) DAST (ZAP Baseline) ----------
  dast:
    runs-on: ubuntu-latest
    needs: [build_push_deploy]
    steps:
      - name: ZAP Baseline Scan (no GitHub issues)
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: http://${{ secrets.VM_HOST }}/
          allowIssueWriting: false
          cmd_options: >-
            -a
            -m 5
      - name: Upload ZAP HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-report
          path: report_html.html
